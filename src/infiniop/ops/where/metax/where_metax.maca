#include "where_metax.h"

#include "../../../elementwise/metax/elementwise_metax.h"
#include "../cuda/kernel.cuh"
#include "../../../../utils/custom_types.h"

using cuda_bfloat16 = hpcc_bfloat16;
using half = __half;

namespace op::where::metax {

Descriptor::~Descriptor() = default;

infiniStatus_t Descriptor::create(
    infiniopHandle_t handle_,
    Descriptor **desc_ptr,
    infiniopTensorDescriptor_t output_desc,
    std::vector<infiniopTensorDescriptor_t> input_descs) {
    
    auto handle = reinterpret_cast<device::metax::Handle *>(handle_);
    auto dtype = output_desc->dtype();
    
    const auto &condition_desc = input_descs.at(0);
    const auto &a_desc = input_descs.at(1);
    const auto &b_desc = input_descs.at(2);
    const auto &output_shape = output_desc->shape();
    const auto &condition_shape = condition_desc->shape();
    const auto &a_shape = a_desc->shape();
    const auto &b_shape = b_desc->shape();
    
    // Check condition tensor data type (should be bool)
    if (condition_desc->dtype() != INFINI_DTYPE_BOOL) {
        return INFINI_STATUS_BAD_TENSOR_DTYPE;
    }
    
    // Check that a and b have the same dtype as output
    if (a_desc->dtype() != dtype || b_desc->dtype() != dtype) {
        return INFINI_STATUS_BAD_TENSOR_DTYPE;
    }
    
    CHECK_DTYPE(dtype, 
                INFINI_DTYPE_F16, INFINI_DTYPE_F32, INFINI_DTYPE_F64, INFINI_DTYPE_BF16,
                INFINI_DTYPE_I8, INFINI_DTYPE_I16, INFINI_DTYPE_I32, INFINI_DTYPE_I64,
                INFINI_DTYPE_U8, INFINI_DTYPE_U16, INFINI_DTYPE_U32, INFINI_DTYPE_U64);
    
    // Check shapes are compatible (broadcast or same)
    CHECK_SAME_SHAPE(output_shape, a_shape);
    CHECK_SAME_SHAPE(output_shape, b_shape);
    CHECK_SAME_SHAPE(output_shape, condition_shape);
    
    // Create elementwise info
    auto info_result = op::elementwise::ElementwiseInfo::create(output_desc, input_descs);
    CHECK_RESULT(info_result);
    auto info = info_result.take();
    auto workspace_size = info.getMetaMemSize() + info.getInputSize() * sizeof(void *);
    
    auto device_impl_result = op::elementwise::metax::DeviceImpl::create(handle->internal());
    CHECK_RESULT(device_impl_result);
    
    *desc_ptr = new Descriptor(
        dtype,
        std::move(info),
        device_impl_result.take(),
        workspace_size,
        handle->device,
        handle->device_id);
    
    return INFINI_STATUS_SUCCESS;
}

infiniStatus_t Descriptor::calculate(
    void *workspace, size_t workspace_size,
    void *output,
    std::vector<const void *> inputs,
    void *stream) const {
    
    if (!_device_info) {
        return INFINI_STATUS_BAD_PARAM;
    }
    
    if (workspace_size < _workspace_size) {
        return INFINI_STATUS_INSUFFICIENT_WORKSPACE;
    }
    
    switch (_dtype) {
    case INFINI_DTYPE_F16:
        return _device_info->calculate<256, cuda::WhereOp, half, bool, half, half>(_info, workspace, output, inputs, stream);
    case INFINI_DTYPE_F32:
        return _device_info->calculate<256, cuda::WhereOp, float, bool, float, float>(_info, workspace, output, inputs, stream);
    case INFINI_DTYPE_F64:
        return _device_info->calculate<256, cuda::WhereOp, double, bool, double, double>(_info, workspace, output, inputs, stream);
    case INFINI_DTYPE_BF16:
        return _device_info->calculate<256, cuda::WhereOp, cuda_bfloat16, bool, cuda_bfloat16, cuda_bfloat16>(_info, workspace, output, inputs, stream);
    case INFINI_DTYPE_I8:
        return _device_info->calculate<256, cuda::WhereOp, int8_t, bool, int8_t, int8_t>(_info, workspace, output, inputs, stream);
    case INFINI_DTYPE_I16:
        return _device_info->calculate<256, cuda::WhereOp, int16_t, bool, int16_t, int16_t>(_info, workspace, output, inputs, stream);
    case INFINI_DTYPE_I32:
        return _device_info->calculate<256, cuda::WhereOp, int32_t, bool, int32_t, int32_t>(_info, workspace, output, inputs, stream);
    case INFINI_DTYPE_I64:
        return _device_info->calculate<256, cuda::WhereOp, int64_t, bool, int64_t, int64_t>(_info, workspace, output, inputs, stream);
    case INFINI_DTYPE_U8:
        return _device_info->calculate<256, cuda::WhereOp, uint8_t, bool, uint8_t, uint8_t>(_info, workspace, output, inputs, stream);
    case INFINI_DTYPE_U16:
        return _device_info->calculate<256, cuda::WhereOp, uint16_t, bool, uint16_t, uint16_t>(_info, workspace, output, inputs, stream);
    case INFINI_DTYPE_U32:
        return _device_info->calculate<256, cuda::WhereOp, uint32_t, bool, uint32_t, uint32_t>(_info, workspace, output, inputs, stream);
    case INFINI_DTYPE_U64:
        return _device_info->calculate<256, cuda::WhereOp, uint64_t, bool, uint64_t, uint64_t>(_info, workspace, output, inputs, stream);
    default:
        return INFINI_STATUS_BAD_TENSOR_DTYPE;
    }
    
    return INFINI_STATUS_SUCCESS;
}

} // namespace op::where::metax