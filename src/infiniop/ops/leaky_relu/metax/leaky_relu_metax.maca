#include "leaky_relu_metax.h"

#include "../../../elementwise/metax/elementwise_metax.h"
#include "../../../../utils/custom_types.h"
#include <hcr/hc_runtime_api.h>

namespace op::leaky_relu::metax {

// Device-side constant for negative slope
__constant__ float g_metax_negative_slope;

// Function to set the negative slope in device constant memory
void setMetaxNegativeSlope(float negative_slope) {
    hcMemcpyToSymbol(g_metax_negative_slope, &negative_slope, sizeof(float), 0, hcMemcpyHostToDevice);
}

// LeakyReLU operator for Metax backend - using MetaX constant memory
typedef struct LeakyReLUOp {
public:
    static constexpr size_t num_inputs = 1;

    template <typename T>
    __device__ __forceinline__ T operator()(const T &x) const {
        // LeakyReLU: x if x > 0, else g_metax_negative_slope * x
        // Use MetaX constant memory for negative slope
        T zero = static_cast<T>(0);
        T neg_slope = static_cast<T>(g_metax_negative_slope);
        return (x > zero) ? x : (x * neg_slope);
    }
} LeakyReLUOp;

Descriptor::~Descriptor() = default;

infiniStatus_t Descriptor::create(
    infiniopHandle_t handle_,
    Descriptor **desc_ptr,
    infiniopTensorDescriptor_t out_desc,
    std::vector<infiniopTensorDescriptor_t> input_desc_vec,
    float negative_slope) {

    auto handle = reinterpret_cast<device::metax::Handle *>(handle_);
    auto dtype = out_desc->dtype();

    const auto &x_desc = input_desc_vec.at(0);
    const auto &y_shape = out_desc->shape();
    const auto &x_shape = x_desc->shape();

    CHECK_DTYPE(dtype, INFINI_DTYPE_F16, INFINI_DTYPE_F32, INFINI_DTYPE_BF16);

    CHECK_SAME_SHAPE(y_shape, x_shape);

    // create METAX elementwise descriptor manually
    auto info_result = op::elementwise::ElementwiseInfo::create(out_desc, input_desc_vec);
    CHECK_RESULT(info_result);
    auto info = info_result.take();
    auto workspace_size = info.getMetaMemSize() + info.getInputSize() * sizeof(void *);

    auto device_impl_result = op::elementwise::metax::DeviceImpl::create(handle->internal());
    CHECK_RESULT(device_impl_result);

    // Set the negative slope in MetaX constant memory
    setMetaxNegativeSlope(negative_slope);

    *desc_ptr = new Descriptor(
        dtype,
        std::move(info),
        std::move(device_impl_result.take()),
        workspace_size,
        handle->device,
        handle->device_id,
        negative_slope);

    return INFINI_STATUS_SUCCESS;
}

infiniStatus_t Descriptor::calculate(
    void *workspace,
    size_t workspace_size,
    void *output,
    std::vector<const void *> inputs,
    void *stream) const {

    if (workspace_size < _workspace_size) {
        return INFINI_STATUS_INSUFFICIENT_WORKSPACE;
    }

    switch (_dtype) {
    case INFINI_DTYPE_F16:
        return _device_info->calculate<256, LeakyReLUOp, half>(_info, workspace, output, inputs, stream);
    case INFINI_DTYPE_F32:
        return _device_info->calculate<256, LeakyReLUOp, float>(_info, workspace, output, inputs, stream);
    case INFINI_DTYPE_BF16:
        return _device_info->calculate<256, LeakyReLUOp, cuda_bfloat16>(_info, workspace, output, inputs, stream);
    default:
        return INFINI_STATUS_BAD_TENSOR_DTYPE;
    }

    return INFINI_STATUS_SUCCESS;
}

} // namespace op::leaky_relu::metax